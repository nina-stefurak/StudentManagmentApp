@page "/project"
@using Microsoft.AspNetCore.Identity;
@using StudentProjectManager.Models;
@using StudentProjectManager.Models.auth;
@using StudentProjectManager.Repository;

<h3>Projects List</h3>

<table class="table">
    <thead>
        <tr>
            <th>Project Name</th>
            <th>Description</th>
            <th>Technology Stack</th>
            <th>Programming Languages</th>
            <th>Difficulty Level</th>
            <th>Estimated Completion Date</th>
            <th>Submission Date</th>
            <th>Team</th>
            <th>Status</th>
            <th>Prestige Points</th>
            <th>Repository Link</th>
            <th>Candidates</th>
            <th>Is Open</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var project in projects)
        {
            <tr>
                <td>@project.Name</td>
                <td>@project.Description</td>
                <td>@string.Join(", ", project.TechnologyStack)</td>
                <td>@string.Join(", ", project.ProgrammingLanguages)</td>
                <td>@project.DifficultyLevel</td>
                <td>@project.EstimatedCompletionDate.ToString("yyyy-MM-dd")</td>
                <td>@project.SubmissionDate.ToString("yyyy-MM-dd")</td>
                <td>@teams.FirstOrDefault(t => t.Id == project.TeamId)?.Name</td>
                <td>@project.Status</td>
                <td>@project.PrestigePoints</td>
                <td><a href="@project.RepositoryLink" target="_blank">@project.RepositoryLink</a></td>
                <td>
                    @foreach (var candidateId in project.CandidateUserIds)
                    {
                        var candidate = users.FirstOrDefault(u => u.Id == candidateId);
                        if (candidate != null)
                        {
                            <div>@candidate.UserName</div>
                        }
                    }
                </td>
                <td>@(project.IsClosed ? "Closed" : "Open")</td>
                <td>
                    @if (IsAdmin || currentUserId == teams.FirstOrDefault(t => t.Id == project.TeamId)?.TeamLeaderId)
                    {
                        <button class="btn btn-danger" @onclick="(() => DeleteProject(project.Id))">Delete</button>
                        <button class="btn btn-primary" @onclick="(() => EditProject(project.Id))">Edit</button>
                    }
                    @if (!project.IsClosed && teams.FirstOrDefault(t => t.Id == project.TeamId)?.MemberUserIds?.Contains(currentUserId) == false)
                    {
                        <button class="btn btn-success" @onclick="(() => ApplyToProject(project.Id))">Apply</button>
                    }
                </td>


            </tr>
        }
    </tbody>
</table>

@if (isEditMode)
{
    <h3>Update of @newProject.Name</h3>
} else {
    <h3>Create Project</h3>
}

<EditForm Model="newProject" OnValidSubmit="CreateEditProjectTask">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <!-- Basic Project Details -->
    <div class="form-group">
        <label for="projectName">Project Name:</label>
        <InputText id="projectName" class="form-control" @bind-Value="newProject.Name" placeholder="Project Name" required />
    </div>

    <div class="form-group">
        <label for="description">Description:</label>
        <InputTextArea id="description" class="form-control" @bind-Value="newProject.Description" placeholder="Project Description" required />
    </div>

    <!-- Technical Details -->
    <div class="form-group">
        <label for="requirements">Requirements:</label>
        <InputText id="requirements" class="form-control" @bind-Value="newProject.Requirements" placeholder="Requirements" required />
    </div>

    <div class="form-group">
        <label for="techStack">Technology Stack:</label>
        <InputText id="techStack" class="form-control" @bind-Value="newProject.TechnologyStack" placeholder="Technology Stack" required />
    </div>

    <div class="form-group">
        <label for="languages">Programming Languages:</label>
        <InputText id="languages" class="form-control" @bind-Value="newProject.ProgrammingLanguages" placeholder="Programming Languages" required />
    </div>

    <div class="form-group">
        <label for="difficultyLevel">Difficulty Level:</label>
        <InputSelect id="difficultyLevel" class="form-control" @bind-Value="newProject.DifficultyLevel" required>
            <option value="">Select Difficulty Level</option>
            <option value="Easy">Easy</option>
            <option value="Medium">Medium</option>
            <option value="Hard">Hard</option>
        </InputSelect>
    </div>

    <!-- Dates -->
    <div class="form-group">
        <label for="plannedEndDate">Planned End Date:</label>
        <InputDate id="plannedEndDate" class="form-control" @bind-Value="newProject.EstimatedCompletionDate" min="@DateTime.Today.ToString("yyyy-MM-dd")" required />
    </div>

    <div class="form-group">
        <label for="submissionDate">Submission Date:</label>
        <InputDate id="submissionDate" class="form-control" @bind-Value="newProject.SubmissionDate" min="@DateTime.Today.ToString("yyyy-MM-dd")" required />
    </div>

    <!-- Team Selection -->
    <div class="form-group">
        <label for="teamSelection">Team Selection:</label>
        <InputSelect id="teamSelection" class="form-control" @bind-Value="newProject.TeamId" required>
            <option value="">Select a Team</option>
            @foreach (var team in teams)
            {
                <option value="@team.Id">@team.Name</option>
            }
        </InputSelect>
    </div>

    <!-- Project Status -->
    <div class="form-group">
        <label for="prestigePoints">Prestige Points:</label>
        <InputNumber id="prestigePoints" class="form-control" @bind-Value="newProject.PrestigePoints" placeholder="Prestige Points" required />
    </div>

    <div class="form-group">
        <label for="projectStatus">Project Status:</label>
        <InputSelect id="projectStatus" class="form-control" @bind-Value="newProject.Status" required>
            <option value="">Select Project Status</option>
            <option value="Created">Created</option>
            <option value="Team Assembled">Team Assembled</option>
            <option value="Started">Started</option>
            <option value="Feature Completed">Feature Completed</option>
            <option value="Testing">Testing</option>
            <option value="Completed">Completed</option>
        </InputSelect>
    </div>

    <div class="form-group">
        <label for="repositoryLink">Repository Link:</label>
        <InputText id="repositoryLink" class="form-control" @bind-Value="newProject.RepositoryLink" placeholder="Repository Link" />
    </div>

    <div class="form-group">
        <label for="isClosed">Is Closed:</label>
        <InputCheckbox id="isClosed" @bind-Value="newProject.IsClosed" />
    </div>

    <div class="form-group">
        @if (!string.IsNullOrEmpty(validationMessage))
        {
            <span class="text-danger">@validationMessage</span>
            <br />
        }
        <button type="submit" class="btn btn-primary">Save Project</button>
    </div>

</EditForm>

@code {
    @inject NavigationManager NavigationManager
    @inject TeamRepository TeamRepository
    @inject ProjectRepository ProjectRepository
    @inject SignInManager<ApplicationUser> SignInManager
    @inject IHttpContextAccessor HttpContextAccessor
    @inject UserManager<ApplicationUser> UserManager
    private Project newProject = new Project();
    private List<StudentProjectManager.Models.Team> teams = new List<StudentProjectManager.Models.Team>();
    private List<Project> projects = new List<Project>();
    private bool isEditMode = false;
    private string validationMessage = string.Empty;
    private List<ApplicationUser> users = new List<ApplicationUser>();
    private string currentUserId;
    private bool IsAdmin { get; set; }




    protected override async Task OnInitializedAsync()
    {
        var currentUser = await UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User);
        if (currentUser != null)
        {
            currentUserId = currentUser.Id;
            IsAdmin = currentUser.Roles.Contains("Admin");
        }
        teams = await TeamRepository.GetAllTeamsAsync();
        projects = await ProjectRepository.GetAllProjectsAsync();
        users = UserManager.Users.ToList();
    }

    private async Task ApplyToProject(string projectId)
    {
        var currentUser = await UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User);
        if (currentUser != null)
        {
            var project = projects.FirstOrDefault(p => p.Id == projectId);
            if (project != null && !project.CandidateUserIds.Contains(currentUser.Id))
            {
                project.CandidateUserIds.Add(currentUser.Id);
                await ProjectRepository.UpdateProjectAsync(project.Id, project);
            }
        }
    }


    private void ValidateProject()
    {
        if (newProject.Status == "Completed" && string.IsNullOrEmpty(newProject.RepositoryLink))
        {
            validationMessage = "Repository link is required to set the project status to 'Completed'";
        }
        else
        {
            validationMessage = string.Empty;
        }
    }


    private async Task CreateEditProjectTask()
    {
        ValidateProject();
        if (!string.IsNullOrEmpty(validationMessage))
        {
            return;
        }
        if (isEditMode)
        {
            await ProjectRepository.UpdateProjectAsync(newProject.Id, newProject);
            isEditMode = false; // Reset the flag after updating
        }
        else
        {
            await ProjectRepository.CreateProjectAsync(newProject);
        }

        // Reset the form
        newProject = new Project();

        NavigationManager.NavigateTo("/project", forceLoad: true);
    }

    private async Task DeleteProject(string projectId)
    {
        if (!string.IsNullOrEmpty(projectId))
        {
            await ProjectRepository.DeleteProjectAsync(projectId);
            projects = await ProjectRepository.GetAllProjectsAsync(); // Refresh the projects list
        }
    }

    private async Task EditProject(string projectId)
    {
        if (!string.IsNullOrEmpty(projectId))
        {
            newProject = await ProjectRepository.GetProjectByIdAsync(projectId);
            isEditMode = true; // Add a flag to indicate edit mode
        }
    }


}