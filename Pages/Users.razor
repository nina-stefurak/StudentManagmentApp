@page "/Users"
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Grids

@inject IUsersManagmentService UsersManagmentService

<h3>Users</h3>
<div style="max-width:1100px">
    <SfGrid @ref="SfUsersGrid" DataSource="@usersData" 
        AllowPdfExport = "true" AllowExcelExport = "true" AllowSorting = "true" AllowPaging = "true" AllowGrouping = "true" AllowFiltering = "true" Toolbar="@toolbar">
        <GridEditSettings Mode = "EditMode.Dialog" AllowAdding = "true" AllowEditing = "true" AllowDeleting = "true">
            <HeaderTemplate>
                <span>@(GetDialogHeaderText(context as UsersModel))</span>
            </HeaderTemplate>
            <FooterTemplate>
                <SfButton OnClick="@Save" IsPrimary ="true">@DialogButtonCaption</SfButton>
                <SfButton OnClick="@Cancel">Cancel</SfButton>
            </FooterTemplate>
        </GridEditSettings>
        <GridPageSettings PageSize="10"></GridPageSettings>
        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
        <GridEvents OnToolbarClick="ToolbarBtnClickHandler" OnActionBegin="ActionBeginHandler" OnActionComplete="ActionCompleteHandler" TValue="UsersModel"></GridEvents>
        <GridColumns>
            <GridColumn AllowAdding = "false" IsPrimaryKey = "true" Field="@nameof(UsersModel.Id)" Width="50px"></GridColumn>
            <GridColumn HeaderText="First name" Field="@nameof(UsersModel.FirstName)" Width="120px"></GridColumn>
            <GridColumn HeaderText="Last name" Field="@nameof(UsersModel.LastName)" Width="120px"></GridColumn>
            <GridColumn HeaderText="Email" Field="@nameof(UsersModel.Email)" Width="170px"></GridColumn>
            <GridColumn Field="@nameof(UsersModel.Technologies)" Width="170px"></GridColumn>
            <GridColumn HeaderText="Programming Languages" Field="@nameof(UsersModel.ProgrammingLanguages)"></GridColumn>
            <GridColumn HeaderText="Skills rating" Field="@nameof(UsersModel.SkillsRating)" Width="110px"></GridColumn>

        <GridColumn HeaderText="" Width="110px">
            <GridCommandColumns>
                <GridCommandColumn Type= "CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions(){
                                                        IconCss = "e-icons e-edit",
                                                        CssClass = "e-flat"
                                                    })">

                </GridCommandColumn>
                <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions(){
                                                        IconCss = "e-icons e-delete",
                                                        CssClass = "e-flat"
                                                    })">

                </GridCommandColumn>
                <GridCommandColumn Type="CommandButtonType.Save" ButtonOption="@(new CommandButtonOptions(){
                                                        IconCss = "e-icons e-update",
                                                        CssClass = "e-flat"
                                                    })">

                </GridCommandColumn>
                <GridCommandColumn Type="CommandButtonType.Cancel" ButtonOption="@(new CommandButtonOptions(){
                                                        IconCss = "e-icons e-cancel-icon",
                                                        CssClass = "e-flat"
                                                    })">

                </GridCommandColumn>
            </GridCommandColumns>
        </GridColumn>
        </GridColumns>
        <!--<SfSpinner @bind-Visible="@VisibleProp"></SfSpinner>-->
    </SfGrid>
</div>
@code {
    //User Browsing: The system enables browsing all users based on technologies and programming languages. 
    //test (crud operations)

    private string DialogButtonCaption { get; set; }

    private SfGrid<UsersModel>? SfUsersGrid { get; set; }

    //
    //private bool VisibleProp{ get; set; } = false;

    private List<UsersModel>? usersData = null;
    private List<object> toolbar = new List<object> {"Add","Search","ExcelExport","PdfExport"}; 

    protected override async Task OnInitializedAsync()
    {
        //VisibleProp = true;

        usersData = await UsersManagmentService.GetUsers();

        //VisibleProp = false;
    }

    public async void ActionBeginHandler(ActionEventArgs<UsersModel> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (args.Action == "Add")
            {
                await UsersManagmentService.AddUsers(args.Data);
            }
            else if(args.Action == "Edit")
            {
                await UsersManagmentService.UpdateUsers(args.Data);
            }
        }
        else if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            await UsersManagmentService.DeleteUsers(args.Data.Id);
        }
    }

    public async void ActionCompleteHandler(ActionEventArgs<UsersModel> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (args.Action == "Add")
            {
                usersData = await UsersManagmentService.GetUsers();
                SfUsersGrid?.Refresh();
            }
        }
    }
    public async void ToolbarBtnClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id.Contains("_excelxport"))
        {
            await SfUsersGrid?.ExportToExcelAsync();
        }
        else if (args.Item.Id.Contains("_pdfexport"))
        {
            await SfUsersGrid?.ExportToPdfAsync();
        }
    }
    private string GetDialogHeaderText(UsersModel usersModel)
    {
        if(usersModel.Id == 0)
        {
            DialogButtonCaption = "Add";
            return "Add User";
        }
        else
        {
            DialogButtonCaption = "Update";
            return $"Edit Details: {usersModel.FirstName} {usersModel.LastName}";
        }
    }

    private async Task Cancel()
    {
        await SfUsersGrid.CloseEditAsync();
    }
    private async Task Save()
    {
        await SfUsersGrid.EndEditAsync();
    }

}
