@page "/profile/edit"
@using Microsoft.AspNetCore.Identity
@using StudentProjectManager.Models.auth
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor


<h3>Edit Profile</h3>

@if (ShowSuccessAlert)
{
    <div class="alert alert-success" role="alert">
        Your data successfuly saved!
    </div>
}

<EditForm Model="UserProfile" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="email">Email:</label>
        <InputText id="email" class="form-control" @bind-Value="UserProfile.Email" />
    </div>

    <div class="form-group">
        <label for="position">Position:</label>
        <InputText id="position" class="form-control" @bind-Value="UserProfile.Position" />
    </div>

    <div class="form-group">
        <label for="capabilities">Capabilities:</label>
        <InputText id="capabilities" class="form-control" @bind-Value="CapabilitiesString" />
        <span class="text-muted">Separate capabilities with commas.</span>
    </div>

    <div class="form-group">
        <label for="seniorityLevel">Seniority Level:</label>
        <InputSelect id="seniorityLevel" class="form-control" @bind-Value="UserProfile.SeniorityLevel">
            <option value="Beginner">Beginner</option>
            <option value="Junior">Junior</option>
            <option value="Regular">Regular</option>
            <option value="Senior">Senior</option>
        </InputSelect>
    </div>

    <button type="submit" class="btn btn-primary">Update Profile</button>
</EditForm>

@code {

    public class UserProfileModel
    {
        public string UserName { get; set; }
        public string Email { get; set; }
        public string Position { get; set; }
        public List<string> Capabilities { get; set; } = new List<string>();
        public SeniorityLevel SeniorityLevel { get; set; }
    }

    private UserProfileModel UserProfile { get; set; } = new UserProfileModel();
    private string CapabilitiesString { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = await UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User);
        if (user != null)
        {
            UserProfile.UserName = user.UserName;
            UserProfile.Email = user.Email;
            UserProfile.Position = user.Position;
            UserProfile.Capabilities = user.Capabilities;
            UserProfile.SeniorityLevel = user.SeniorityLevel;
            CapabilitiesString = string.Join(", ", user.Capabilities);
        }
    }

    private bool ShowSuccessAlert { get; set; } = false;

    private async Task HandleValidSubmit()
    {
        var user = await UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User);
        if (user != null)
        {
            user.Email = UserProfile.Email;
            user.Position = UserProfile.Position;
            user.Capabilities = UserProfile.Capabilities;
            user.SeniorityLevel = UserProfile.SeniorityLevel;

            // Update capabilities from string
            if (!string.IsNullOrWhiteSpace(CapabilitiesString))
            {
                user.Capabilities = CapabilitiesString.Split(',').Select(s => s.Trim()).ToList();
            }
            else
            {
                user.Capabilities.Clear();
            }

            var result = await UserManager.UpdateAsync(user);
            if (result.Succeeded)
            {
                //NavigationManager.NavigateTo("/profile/edit", forceLoad: true);
                ShowSuccessAlert = true;
                StateHasChanged();
            }
            else
            {
                // Handle error
            }
        }
    }
}
